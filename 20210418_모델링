# 3주차 퀴즈

1-2) 모델간의 관계도 
# One To One
- 1:1 로 맵핑
- ex) 사용자 모델, 회사모델
- 사용자가 속한 회사 (오직 하나만 있을 때)

# One To Many
- 1:N
- 제품에 달린 댓글
- 제품 하나에 대해 여러개의 댓글이 달린다
- 외부키 제품 ID
- 하나의 상점에 여러개의 메뉴

# Many To One
- One To Many와 반대
- 좌측은 1번만 가능
-ex) a는 1번 자동차 b는 1,2번 자동차

# Many To Many
- N:M의 관계
- 좌측 우측 여러번 선택 가능
- 태그를 구현하는 경우 많이 쓰임
- ex) 인스타그램
A 게시물에 걸린 태그 확인,
#서울 을 태그한 게시물들 확인

3) Shops 모델에 ShopsMenu을 OneToMany로 작성하려한다.
(id 필드를 외부키로 shop_id로 지정)

Shops.associate = (models) =>{ // one to many
        Shops.hasMany(models.ShopsMenu , {
            as :'Menu', //별칭 
            foreignKey : 'shop_id',
            sourceKey:'id', //상점의 id 
            onDelete : 'CASCADE'
        })
    }
    
4) Shops 모델 정의 : ShopsMenu를 저장
const shop = await models.Shop.findByPk(req.params.id);
await shop.createMenu(req.body);
// createMenu -> : 'create' + ShopsMenu의 별칭인 'Menu'(Shops.js)

5) Shops 모델 정의 : ShopsMenu를 join해서 템플릿에서 shop.Menu로 조회
const shop = await models.Shops.findOne({
  where : { id :req.params.id },
  include : ['Menu']
});

6) npm package multer로 파일 업로드 할 때 form 태그
<form action="" method="post" enctype="multipart/form-data">

7) GET /uploads로 express static 설정
this.app('/uploads',express.static('uploads'));

8) multer 미들웨어 setting
const multer = require('multer');
const storage = multer.diskStorage({
    destination : (req,file,callback)=>{ //이미지가 저장되는 도착지 지정
        callback(null,uploadDir);
    },
    filename:(req,file,callback) =>{ //shops-날짜.jpg(png)저장
        callback(null,'shops-'+Date.now()+'.'+file.mimetype.split('/')[1]);
    }
});

9) upload.single('thumbnail')로 미들웨어 setting
req.file -> fieldname, path,filename

console.log(req.file);
/*
        {
            fieldname: 'thumbnail',
            originalname: 'wb.jpg',
            encoding: '7bit',
            mimetype: 'image/jpeg',
            destination: 'C:\\Users\\daxje\\Desktop\\template\\uploads',
            filename: 'shops-1618417473503.jpeg',
            path: 'C:\\Users\\daxje\\Desktop\\template\\uploads\\shops-1618417473503.jpeg',
            size: 122110
          }
           */
